#pragma once

#include "GraphicsApiResource.h"

#include <d3d11.h>

inline D3D11_USAGE ConvertAccessFlagToUsage( UINT accessFlag )
{
	using namespace RESOURCE_ACCESS_FLAG;

	switch ( accessFlag )
	{
	case ( GPU_READ | GPU_WRITE ):
		return D3D11_USAGE_DEFAULT;
	case ( GPU_READ | CPU_WRITE ):
		return D3D11_USAGE_DYNAMIC;
	case GPU_READ:
		return D3D11_USAGE_IMMUTABLE;
	case ( GPU_READ | GPU_WRITE | CPU_READ | CPU_WRITE ):
	case ( GPU_READ | GPU_WRITE | CPU_READ ):
		return D3D11_USAGE_STAGING;
	default:
		assert( false );
		return D3D11_USAGE_DEFAULT;
	}
}

inline UINT ConvertUsageToAccessFlag( D3D11_USAGE accessFlag )
{
	using namespace RESOURCE_ACCESS_FLAG;

	switch ( accessFlag )
	{
	case D3D11_USAGE_DEFAULT:
		return GPU_READ | GPU_WRITE;
	case D3D11_USAGE_DYNAMIC:
		return GPU_READ | CPU_WRITE;
	case D3D11_USAGE_IMMUTABLE:
		return GPU_READ;
	case D3D11_USAGE_STAGING:
		return GPU_READ | GPU_WRITE | CPU_READ | CPU_WRITE;
	default:
		assert( false );
		return 0;
	}
}

inline UINT ConvertTypeToBind( UINT type )
{
	using namespace RESOURCE_BIND_TYPE;

	UINT ret = 0;

	if ( type & VERTEX_BUFFER )
	{
		ret |= D3D11_BIND_VERTEX_BUFFER;
	}

	if ( type & INDEX_BUFFER )
	{
		ret |= D3D11_BIND_INDEX_BUFFER;
	}

	if ( type & CONSTANT_BUFFER )
	{
		ret |= D3D11_BIND_CONSTANT_BUFFER;
	}

	if ( type & SHADER_RESOURCE )
	{
		ret |= D3D11_BIND_SHADER_RESOURCE;
	}

	if ( type & STREAM_OUTPUT )
	{
		ret |= D3D11_BIND_STREAM_OUTPUT;
	}

	if ( type & RENDER_TARGET )
	{
		ret |= D3D11_BIND_RENDER_TARGET;
	}

	if ( type & DEPTH_STENCIL )
	{
		ret |= D3D11_BIND_DEPTH_STENCIL;
	}

	if ( type & RANDOM_ACCESS )
	{
		ret |= D3D11_BIND_UNORDERED_ACCESS;
	}

	return ret;
}

inline UINT ConvertBindToType( UINT type )
{
	using namespace RESOURCE_BIND_TYPE;

	UINT ret = 0;

	if ( type & D3D11_BIND_VERTEX_BUFFER )
	{
		ret |= VERTEX_BUFFER;
	}

	if ( type & D3D11_BIND_INDEX_BUFFER )
	{
		ret |= INDEX_BUFFER;
	}

	if ( type & D3D11_BIND_CONSTANT_BUFFER )
	{
		ret |= CONSTANT_BUFFER;
	}

	if ( type & D3D11_BIND_SHADER_RESOURCE )
	{
		ret |= SHADER_RESOURCE;
	}

	if ( type & D3D11_BIND_STREAM_OUTPUT )
	{
		ret |= STREAM_OUTPUT;
	}

	if ( type & D3D11_BIND_RENDER_TARGET )
	{
		ret |= RENDER_TARGET;
	}

	if ( type & D3D11_BIND_DEPTH_STENCIL )
	{
		ret |= DEPTH_STENCIL;
	}

	if ( type & D3D11_BIND_UNORDERED_ACCESS )
	{
		ret |= RANDOM_ACCESS;
	}

	return ret;
}

inline UINT ConvertMicsToDXMisc( UINT miscFlag )
{
	using namespace RESOURCE_MISC;

	UINT ret = 0;

	if ( miscFlag & GENERATE_MIPS )
	{
		ret |= D3D11_RESOURCE_MISC_GENERATE_MIPS;
	}

	if ( miscFlag & SHARED )
	{
		ret |= D3D11_RESOURCE_MISC_SHARED;
	}

	if ( miscFlag & TEXTURECUBE )
	{
		ret |= D3D11_RESOURCE_MISC_TEXTURECUBE;
	}

	if ( miscFlag & DRAWINDIRECT_ARGS )
	{
		ret |= D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS;
	}

	if ( miscFlag & BUFFER_ALLOW_RAW_VIEWS )
	{
		assert( ( miscFlag & BUFFER_STRUCTURED ) == 0 );
		ret |= D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS;
	}

	if ( miscFlag & BUFFER_STRUCTURED )
	{
		assert( ( miscFlag & BUFFER_ALLOW_RAW_VIEWS ) == 0 );
		ret |= D3D11_RESOURCE_MISC_BUFFER_STRUCTURED;
	}

	if ( miscFlag & RESOURCE_CLAMP )
	{
		ret |= D3D11_RESOURCE_MISC_RESOURCE_CLAMP;
	}

	if ( miscFlag & SHARED_KEYEDMUTEX )
	{
		ret |= D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX;
	}

	if ( miscFlag & GDI_COMPATIBLE )
	{
		ret |= D3D11_RESOURCE_MISC_GDI_COMPATIBLE;
	}

	return ret;
}

inline UINT ConvertDXMiscToMisc( UINT miscFlag )
{
	using namespace RESOURCE_MISC;

	UINT ret = 0;

	if ( miscFlag & D3D11_RESOURCE_MISC_GENERATE_MIPS )
	{
		ret |= GENERATE_MIPS;
	}

	if ( miscFlag & D3D11_RESOURCE_MISC_SHARED )
	{
		ret |= SHARED;
	}

	if ( miscFlag & D3D11_RESOURCE_MISC_TEXTURECUBE )
	{
		ret |= TEXTURECUBE;
	}

	if ( miscFlag & D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS )
	{
		ret |= DRAWINDIRECT_ARGS;
	}

	if ( miscFlag & D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS )
	{
		ret |= BUFFER_ALLOW_RAW_VIEWS;
	}

	if ( miscFlag & D3D11_RESOURCE_MISC_BUFFER_STRUCTURED )
	{
		ret |= BUFFER_STRUCTURED;
	}

	if ( miscFlag & D3D11_RESOURCE_MISC_RESOURCE_CLAMP )
	{
		ret |= RESOURCE_CLAMP;
	}

	if ( miscFlag & D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX )
	{
		ret |= SHARED_KEYEDMUTEX;
	}

	if ( miscFlag & D3D11_RESOURCE_MISC_GDI_COMPATIBLE )
	{
		ret |= GDI_COMPATIBLE;
	}

	return ret;
}

inline UINT ConvertAccessFlagToCpuFlag( UINT accessFlag )
{
	using namespace RESOURCE_ACCESS_FLAG;

	UINT ret = 0;

	if ( accessFlag & CPU_READ )
	{
		ret |= D3D11_CPU_ACCESS_READ;
	}

	if ( accessFlag & CPU_WRITE )
	{
		ret |= D3D11_CPU_ACCESS_WRITE;
	}

	return ret;
}

inline DXGI_FORMAT ConvertFormatToDxgiFormat( RESOURCE_FORMAT format )
{
	switch ( format )
	{
	case RESOURCE_FORMAT::UNKNOWN:
		return DXGI_FORMAT_UNKNOWN;
	case RESOURCE_FORMAT::R32G32B32A32_TYPELESS:
		return DXGI_FORMAT_R32G32B32A32_TYPELESS;
	case RESOURCE_FORMAT::R32G32B32A32_FLOAT:
		return DXGI_FORMAT_R32G32B32A32_FLOAT;
	case RESOURCE_FORMAT::R32G32B32A32_UINT:
		return DXGI_FORMAT_R32G32B32A32_UINT;
	case RESOURCE_FORMAT::R32G32B32A32_SINT:
		return DXGI_FORMAT_R32G32B32A32_SINT;
	case RESOURCE_FORMAT::R32G32B32_TYPELESS:
		return DXGI_FORMAT_R32G32B32_TYPELESS;
	case RESOURCE_FORMAT::R32G32B32_FLOAT:
		return DXGI_FORMAT_R32G32B32_FLOAT;
	case RESOURCE_FORMAT::R32G32B32_UINT:
		return DXGI_FORMAT_R32G32B32_UINT;
	case RESOURCE_FORMAT::R32G32B32_SINT:
		return DXGI_FORMAT_R32G32B32_SINT;
	case RESOURCE_FORMAT::R16G16B16A16_TYPELESS:
		return DXGI_FORMAT_R16G16B16A16_TYPELESS;
	case RESOURCE_FORMAT::R16G16B16A16_FLOAT:
		return DXGI_FORMAT_R16G16B16A16_FLOAT;
	case RESOURCE_FORMAT::R16G16B16A16_UNORM:
		return DXGI_FORMAT_R16G16B16A16_UNORM;
	case RESOURCE_FORMAT::R16G16B16A16_UINT:
		return DXGI_FORMAT_R16G16B16A16_UINT;
	case RESOURCE_FORMAT::R16G16B16A16_SNORM:
		return DXGI_FORMAT_R16G16B16A16_SNORM;
	case RESOURCE_FORMAT::R16G16B16A16_SINT:
		return DXGI_FORMAT_R16G16B16A16_SINT;
	case RESOURCE_FORMAT::R32G32_TYPELESS:
		return DXGI_FORMAT_R32G32_TYPELESS;
	case RESOURCE_FORMAT::R32G32_FLOAT:
		return DXGI_FORMAT_R32G32_FLOAT;
	case RESOURCE_FORMAT::R32G32_UINT:
		return DXGI_FORMAT_R32G32_UINT;
	case RESOURCE_FORMAT::R32G32_SINT:
		return DXGI_FORMAT_R32G32_SINT;
	case RESOURCE_FORMAT::R32G8X24_TYPELESS:
		return DXGI_FORMAT_R32G8X24_TYPELESS;
	case RESOURCE_FORMAT::D32_FLOAT_S8X24_UINT:
		return DXGI_FORMAT_D32_FLOAT_S8X24_UINT;
	case RESOURCE_FORMAT::R32_FLOAT_X8X24_TYPELESS:
		return DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS;
	case RESOURCE_FORMAT::X32_TYPELESS_G8X24_UINT:
		return DXGI_FORMAT_X32_TYPELESS_G8X24_UINT;
	case RESOURCE_FORMAT::R10G10B10A2_TYPELESS:
		return DXGI_FORMAT_R10G10B10A2_TYPELESS;
	case RESOURCE_FORMAT::R10G10B10A2_UNORM:
		return DXGI_FORMAT_R10G10B10A2_UNORM;
	case RESOURCE_FORMAT::R10G10B10A2_UINT:
		return DXGI_FORMAT_R10G10B10A2_UINT;
	case RESOURCE_FORMAT::R11G11B10_FLOAT:
		return DXGI_FORMAT_R11G11B10_FLOAT;
	case RESOURCE_FORMAT::R8G8B8A8_TYPELESS:
		return DXGI_FORMAT_R8G8B8A8_TYPELESS;
	case RESOURCE_FORMAT::R8G8B8A8_UNORM:
		return DXGI_FORMAT_R8G8B8A8_UNORM;
	case RESOURCE_FORMAT::R8G8B8A8_UNORM_SRGB:
		return DXGI_FORMAT_R8G8B8A8_UNORM_SRGB;
	case RESOURCE_FORMAT::R8G8B8A8_UINT:
		return DXGI_FORMAT_R8G8B8A8_UINT;
	case RESOURCE_FORMAT::R8G8B8A8_SNORM:
		return DXGI_FORMAT_R8G8B8A8_SNORM;
	case RESOURCE_FORMAT::R8G8B8A8_SINT:
		return DXGI_FORMAT_R8G8B8A8_SINT;
	case RESOURCE_FORMAT::R16G16_TYPELESS:
		return DXGI_FORMAT_R16G16_TYPELESS;
	case RESOURCE_FORMAT::R16G16_FLOAT:
		return DXGI_FORMAT_R16G16_FLOAT;
	case RESOURCE_FORMAT::R16G16_UNORM:
		return DXGI_FORMAT_R16G16_UNORM;
	case RESOURCE_FORMAT::R16G16_UINT:
		return DXGI_FORMAT_R16G16_UINT;
	case RESOURCE_FORMAT::R16G16_SNORM:
		return DXGI_FORMAT_R16G16_SNORM;
	case RESOURCE_FORMAT::R16G16_SINT:
		return DXGI_FORMAT_R16G16_SINT;
	case RESOURCE_FORMAT::R32_TYPELESS:
		return DXGI_FORMAT_R32_TYPELESS;
	case RESOURCE_FORMAT::D32_FLOAT:
		return DXGI_FORMAT_D32_FLOAT;
	case RESOURCE_FORMAT::R32_FLOAT:
		return DXGI_FORMAT_R32_FLOAT;
	case RESOURCE_FORMAT::R32_UINT:
		return DXGI_FORMAT_R32_UINT;
	case RESOURCE_FORMAT::R32_SINT:
		return DXGI_FORMAT_R32_SINT;
	case RESOURCE_FORMAT::R24G8_TYPELESS:
		return DXGI_FORMAT_R24G8_TYPELESS;
	case RESOURCE_FORMAT::D24_UNORM_S8_UINT:
		return DXGI_FORMAT_D24_UNORM_S8_UINT;
	case RESOURCE_FORMAT::R24_UNORM_X8_TYPELESS:
		return DXGI_FORMAT_R24_UNORM_X8_TYPELESS;
	case RESOURCE_FORMAT::X24_TYPELESS_G8_UINT:
		return DXGI_FORMAT_X24_TYPELESS_G8_UINT;
	case RESOURCE_FORMAT::R8G8_TYPELESS:
		return DXGI_FORMAT_R8G8_TYPELESS;
	case RESOURCE_FORMAT::R8G8_UNORM:
		return DXGI_FORMAT_R8G8_UNORM;
	case RESOURCE_FORMAT::R8G8_UINT:
		return DXGI_FORMAT_R8G8_UINT;
	case RESOURCE_FORMAT::R8G8_SNORM:
		return DXGI_FORMAT_R8G8_SNORM;
	case RESOURCE_FORMAT::R8G8_SINT:
		return DXGI_FORMAT_R8G8_SINT;
	case RESOURCE_FORMAT::R16_TYPELESS:
		return DXGI_FORMAT_R16_TYPELESS;
	case RESOURCE_FORMAT::R16_FLOAT:
		return DXGI_FORMAT_R16_FLOAT;
	case RESOURCE_FORMAT::D16_UNORM:
		return DXGI_FORMAT_D16_UNORM;
	case RESOURCE_FORMAT::R16_UNORM:
		return DXGI_FORMAT_R16_UNORM;
	case RESOURCE_FORMAT::R16_UINT:
		return DXGI_FORMAT_R16_UINT;
	case RESOURCE_FORMAT::R16_SNORM:
		return DXGI_FORMAT_R16_SNORM;
	case RESOURCE_FORMAT::R16_SINT:
		return DXGI_FORMAT_R16_SINT;
	case RESOURCE_FORMAT::R8_TYPELESS:
		return DXGI_FORMAT_R8_TYPELESS;
	case RESOURCE_FORMAT::R8_UNORM:
		return DXGI_FORMAT_R8_UNORM;
	case RESOURCE_FORMAT::R8_UINT:
		return DXGI_FORMAT_R8_UINT;
	case RESOURCE_FORMAT::R8_SNORM:
		return DXGI_FORMAT_R8_SNORM;
	case RESOURCE_FORMAT::R8_SINT:
		return DXGI_FORMAT_R8_SINT;
	case RESOURCE_FORMAT::A8_UNORM:
		return DXGI_FORMAT_A8_UNORM;
	case RESOURCE_FORMAT::R1_UNORM:
		return DXGI_FORMAT_R1_UNORM;
	case RESOURCE_FORMAT::R9G9B9E5_SHAREDEXP:
		return DXGI_FORMAT_R9G9B9E5_SHAREDEXP;
	case RESOURCE_FORMAT::R8G8_B8G8_UNORM:
		return DXGI_FORMAT_R8G8_B8G8_UNORM;
	case RESOURCE_FORMAT::G8R8_G8B8_UNORM:
		return DXGI_FORMAT_G8R8_G8B8_UNORM;
	case RESOURCE_FORMAT::BC1_TYPELESS:
		return DXGI_FORMAT_BC1_TYPELESS;
	case RESOURCE_FORMAT::BC1_UNORM:
		return DXGI_FORMAT_BC1_UNORM;
	case RESOURCE_FORMAT::BC1_UNORM_SRGB:
		return DXGI_FORMAT_BC1_UNORM_SRGB;
	case RESOURCE_FORMAT::BC2_TYPELESS:
		return DXGI_FORMAT_BC2_TYPELESS;
	case RESOURCE_FORMAT::BC2_UNORM:
		return DXGI_FORMAT_BC2_UNORM;
	case RESOURCE_FORMAT::BC2_UNORM_SRGB:
		return DXGI_FORMAT_BC2_UNORM_SRGB;
	case RESOURCE_FORMAT::BC3_TYPELESS:
		return DXGI_FORMAT_BC3_TYPELESS;
	case RESOURCE_FORMAT::BC3_UNORM:
		return DXGI_FORMAT_BC3_UNORM;
	case RESOURCE_FORMAT::BC3_UNORM_SRGB:
		return DXGI_FORMAT_BC3_UNORM_SRGB;
	case RESOURCE_FORMAT::BC4_TYPELESS:
		return DXGI_FORMAT_BC4_TYPELESS;
	case RESOURCE_FORMAT::BC4_UNORM:
		return DXGI_FORMAT_BC4_UNORM;
	case RESOURCE_FORMAT::BC4_SNORM:
		return DXGI_FORMAT_BC4_SNORM;
	case RESOURCE_FORMAT::BC5_TYPELESS:
		return DXGI_FORMAT_BC5_TYPELESS;
	case RESOURCE_FORMAT::BC5_UNORM:
		return DXGI_FORMAT_BC5_UNORM;
	case RESOURCE_FORMAT::BC5_SNORM:
		return DXGI_FORMAT_BC5_SNORM;
	case RESOURCE_FORMAT::B5G6R5_UNORM:
		return DXGI_FORMAT_B5G6R5_UNORM;
	case RESOURCE_FORMAT::B5G5R5A1_UNORM:
		return DXGI_FORMAT_B5G5R5A1_UNORM;
	case RESOURCE_FORMAT::B8G8R8A8_UNORM:
		return DXGI_FORMAT_B8G8R8A8_UNORM;
	case RESOURCE_FORMAT::B8G8R8X8_UNORM:
		return DXGI_FORMAT_B8G8R8X8_UNORM;
	case RESOURCE_FORMAT::R10G10B10_XR_BIAS_A2_UNORM:
		return DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM;
	case RESOURCE_FORMAT::B8G8R8A8_TYPELESS:
		return DXGI_FORMAT_B8G8R8A8_TYPELESS;
	case RESOURCE_FORMAT::B8G8R8A8_UNORM_SRGB:
		return DXGI_FORMAT_B8G8R8A8_UNORM_SRGB;
	case RESOURCE_FORMAT::B8G8R8X8_TYPELESS:
		return DXGI_FORMAT_B8G8R8X8_TYPELESS;
	case RESOURCE_FORMAT::B8G8R8X8_UNORM_SRGB:
		return DXGI_FORMAT_B8G8R8X8_UNORM_SRGB;
	case RESOURCE_FORMAT::BC6H_TYPELESS:
		return DXGI_FORMAT_BC6H_TYPELESS;
	case RESOURCE_FORMAT::BC6H_UF16:
		return DXGI_FORMAT_BC6H_UF16;
	case RESOURCE_FORMAT::BC6H_SF16:
		return DXGI_FORMAT_BC6H_SF16;
	case RESOURCE_FORMAT::BC7_TYPELESS:
		return DXGI_FORMAT_BC7_TYPELESS;
	case RESOURCE_FORMAT::BC7_UNORM:
		return DXGI_FORMAT_BC7_UNORM;
	case RESOURCE_FORMAT::BC7_UNORM_SRGB:
		return DXGI_FORMAT_BC7_UNORM_SRGB;
	default:
		assert( false );
		return DXGI_FORMAT_UNKNOWN;
	}
}

inline RESOURCE_FORMAT ConvertDxgiFormatToFormat( DXGI_FORMAT format )
{
	switch ( format )
	{
	case DXGI_FORMAT_UNKNOWN:
		return RESOURCE_FORMAT::UNKNOWN;
	case DXGI_FORMAT_R32G32B32A32_TYPELESS:
		return RESOURCE_FORMAT::R32G32B32A32_TYPELESS;
	case DXGI_FORMAT_R32G32B32A32_FLOAT:
		return RESOURCE_FORMAT::R32G32B32A32_FLOAT;
	case DXGI_FORMAT_R32G32B32A32_UINT:
		return RESOURCE_FORMAT::R32G32B32A32_UINT;
	case DXGI_FORMAT_R32G32B32A32_SINT:
		return RESOURCE_FORMAT::R32G32B32A32_SINT;
	case DXGI_FORMAT_R32G32B32_TYPELESS:
		return RESOURCE_FORMAT::R32G32B32_TYPELESS;
	case DXGI_FORMAT_R32G32B32_FLOAT:
		return RESOURCE_FORMAT::R32G32B32_FLOAT;
	case DXGI_FORMAT_R32G32B32_UINT:
		return RESOURCE_FORMAT::R32G32B32_UINT;
	case DXGI_FORMAT_R32G32B32_SINT:
		return RESOURCE_FORMAT::R32G32B32_SINT;
	case DXGI_FORMAT_R16G16B16A16_TYPELESS:
		return RESOURCE_FORMAT::R16G16B16A16_TYPELESS;
	case DXGI_FORMAT_R16G16B16A16_FLOAT:
		return RESOURCE_FORMAT::R16G16B16A16_FLOAT;
	case DXGI_FORMAT_R16G16B16A16_UNORM:
		return RESOURCE_FORMAT::R16G16B16A16_UNORM;
	case DXGI_FORMAT_R16G16B16A16_UINT:
		return RESOURCE_FORMAT::R16G16B16A16_UINT;
	case DXGI_FORMAT_R16G16B16A16_SNORM:
		return RESOURCE_FORMAT::R16G16B16A16_SNORM;
	case DXGI_FORMAT_R16G16B16A16_SINT:
		return RESOURCE_FORMAT::R16G16B16A16_SINT;
	case DXGI_FORMAT_R32G32_TYPELESS:
		return RESOURCE_FORMAT::R32G32_TYPELESS;
	case DXGI_FORMAT_R32G32_FLOAT:
		return RESOURCE_FORMAT::R32G32_FLOAT;
	case DXGI_FORMAT_R32G32_UINT:
		return RESOURCE_FORMAT::R32G32_UINT;
	case DXGI_FORMAT_R32G32_SINT:
		return RESOURCE_FORMAT::R32G32_SINT;
	case DXGI_FORMAT_R32G8X24_TYPELESS:
		return RESOURCE_FORMAT::R32G8X24_TYPELESS;
	case DXGI_FORMAT_D32_FLOAT_S8X24_UINT:
		return RESOURCE_FORMAT::D32_FLOAT_S8X24_UINT;
	case DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS:
		return RESOURCE_FORMAT::R32_FLOAT_X8X24_TYPELESS;
	case DXGI_FORMAT_X32_TYPELESS_G8X24_UINT:
		return RESOURCE_FORMAT::X32_TYPELESS_G8X24_UINT;
	case DXGI_FORMAT_R10G10B10A2_TYPELESS:
		return RESOURCE_FORMAT::R10G10B10A2_TYPELESS;
	case DXGI_FORMAT_R10G10B10A2_UNORM:
		return RESOURCE_FORMAT::R10G10B10A2_UNORM;
	case DXGI_FORMAT_R10G10B10A2_UINT:
		return RESOURCE_FORMAT::R10G10B10A2_UINT;
	case DXGI_FORMAT_R11G11B10_FLOAT:
		return RESOURCE_FORMAT::R11G11B10_FLOAT;
	case DXGI_FORMAT_R8G8B8A8_TYPELESS:
		return RESOURCE_FORMAT::R8G8B8A8_TYPELESS;
	case DXGI_FORMAT_R8G8B8A8_UNORM:
		return RESOURCE_FORMAT::R8G8B8A8_UNORM;
	case DXGI_FORMAT_R8G8B8A8_UNORM_SRGB:
		return RESOURCE_FORMAT::R8G8B8A8_UNORM_SRGB;
	case DXGI_FORMAT_R8G8B8A8_UINT:
		return RESOURCE_FORMAT::R8G8B8A8_UINT;
	case DXGI_FORMAT_R8G8B8A8_SNORM:
		return RESOURCE_FORMAT::R8G8B8A8_SNORM;
	case DXGI_FORMAT_R8G8B8A8_SINT:
		return RESOURCE_FORMAT::R8G8B8A8_SINT;
	case DXGI_FORMAT_R16G16_TYPELESS:
		return RESOURCE_FORMAT::R16G16_TYPELESS;
	case DXGI_FORMAT_R16G16_FLOAT:
		return RESOURCE_FORMAT::R16G16_FLOAT;
	case DXGI_FORMAT_R16G16_UNORM:
		return RESOURCE_FORMAT::R16G16_UNORM;
	case DXGI_FORMAT_R16G16_UINT:
		return RESOURCE_FORMAT::R16G16_UINT;
	case DXGI_FORMAT_R16G16_SNORM:
		return RESOURCE_FORMAT::R16G16_SNORM;
	case DXGI_FORMAT_R16G16_SINT:
		return RESOURCE_FORMAT::R16G16_SINT;
	case DXGI_FORMAT_R32_TYPELESS:
		return RESOURCE_FORMAT::R32_TYPELESS;
	case DXGI_FORMAT_D32_FLOAT:
		return RESOURCE_FORMAT::D32_FLOAT;
	case DXGI_FORMAT_R32_FLOAT:
		return RESOURCE_FORMAT::R32_FLOAT;
	case DXGI_FORMAT_R32_UINT:
		return RESOURCE_FORMAT::R32_UINT;
	case DXGI_FORMAT_R32_SINT:
		return RESOURCE_FORMAT::R32_SINT;
	case DXGI_FORMAT_R24G8_TYPELESS:
		return RESOURCE_FORMAT::R24G8_TYPELESS;
	case DXGI_FORMAT_D24_UNORM_S8_UINT:
		return RESOURCE_FORMAT::D24_UNORM_S8_UINT;
	case DXGI_FORMAT_R24_UNORM_X8_TYPELESS:
		return RESOURCE_FORMAT::R24_UNORM_X8_TYPELESS;
	case DXGI_FORMAT_X24_TYPELESS_G8_UINT:
		return RESOURCE_FORMAT::X24_TYPELESS_G8_UINT;
	case DXGI_FORMAT_R8G8_TYPELESS:
		return RESOURCE_FORMAT::R8G8_TYPELESS;
	case DXGI_FORMAT_R8G8_UNORM:
		return RESOURCE_FORMAT::R8G8_UNORM;
	case DXGI_FORMAT_R8G8_UINT:
		return RESOURCE_FORMAT::R8G8_UINT;
	case DXGI_FORMAT_R8G8_SNORM:
		return RESOURCE_FORMAT::R8G8_SNORM;
	case DXGI_FORMAT_R8G8_SINT:
		return RESOURCE_FORMAT::R8G8_SINT;
	case DXGI_FORMAT_R16_TYPELESS:
		return RESOURCE_FORMAT::R16_TYPELESS;
	case DXGI_FORMAT_R16_FLOAT:
		return RESOURCE_FORMAT::R16_FLOAT;
	case DXGI_FORMAT_D16_UNORM:
		return RESOURCE_FORMAT::D16_UNORM;
	case DXGI_FORMAT_R16_UNORM:
		return RESOURCE_FORMAT::R16_UNORM;
	case DXGI_FORMAT_R16_UINT:
		return RESOURCE_FORMAT::R16_UINT;
	case DXGI_FORMAT_R16_SNORM:
		return RESOURCE_FORMAT::R16_SNORM;
	case DXGI_FORMAT_R16_SINT:
		return RESOURCE_FORMAT::R16_SINT;
	case DXGI_FORMAT_R8_TYPELESS:
		return RESOURCE_FORMAT::R8_TYPELESS;
	case DXGI_FORMAT_R8_UNORM:
		return RESOURCE_FORMAT::R8_UNORM;
	case DXGI_FORMAT_R8_UINT:
		return RESOURCE_FORMAT::R8_UINT;
	case DXGI_FORMAT_R8_SNORM:
		return RESOURCE_FORMAT::R8_SNORM;
	case DXGI_FORMAT_R8_SINT:
		return RESOURCE_FORMAT::R8_SINT;
	case DXGI_FORMAT_A8_UNORM:
		return RESOURCE_FORMAT::A8_UNORM;
	case DXGI_FORMAT_R1_UNORM:
		return RESOURCE_FORMAT::R1_UNORM;
	case DXGI_FORMAT_R9G9B9E5_SHAREDEXP:
		return RESOURCE_FORMAT::R9G9B9E5_SHAREDEXP;
	case DXGI_FORMAT_R8G8_B8G8_UNORM:
		return RESOURCE_FORMAT::R8G8_B8G8_UNORM;
	case DXGI_FORMAT_G8R8_G8B8_UNORM:
		return RESOURCE_FORMAT::G8R8_G8B8_UNORM;
	case DXGI_FORMAT_BC1_TYPELESS:
		return RESOURCE_FORMAT::BC1_TYPELESS;
	case DXGI_FORMAT_BC1_UNORM:
		return RESOURCE_FORMAT::BC1_UNORM;
	case DXGI_FORMAT_BC1_UNORM_SRGB:
		return RESOURCE_FORMAT::BC1_UNORM_SRGB;
	case DXGI_FORMAT_BC2_TYPELESS:
		return RESOURCE_FORMAT::BC2_TYPELESS;
	case DXGI_FORMAT_BC2_UNORM:
		return RESOURCE_FORMAT::BC2_UNORM;
	case DXGI_FORMAT_BC2_UNORM_SRGB:
		return RESOURCE_FORMAT::BC2_UNORM_SRGB;
	case DXGI_FORMAT_BC3_TYPELESS:
		return RESOURCE_FORMAT::BC3_TYPELESS;
	case DXGI_FORMAT_BC3_UNORM:
		return RESOURCE_FORMAT::BC3_UNORM;
	case DXGI_FORMAT_BC3_UNORM_SRGB:
		return RESOURCE_FORMAT::BC3_UNORM_SRGB;
	case DXGI_FORMAT_BC4_TYPELESS:
		return RESOURCE_FORMAT::BC4_TYPELESS;
	case DXGI_FORMAT_BC4_UNORM:
		return RESOURCE_FORMAT::BC4_UNORM;
	case DXGI_FORMAT_BC4_SNORM:
		return RESOURCE_FORMAT::BC4_SNORM;
	case DXGI_FORMAT_BC5_TYPELESS:
		return RESOURCE_FORMAT::BC5_TYPELESS;
	case DXGI_FORMAT_BC5_UNORM:
		return RESOURCE_FORMAT::BC5_UNORM;
	case DXGI_FORMAT_BC5_SNORM:
		return RESOURCE_FORMAT::BC5_SNORM;
	case DXGI_FORMAT_B5G6R5_UNORM:
		return RESOURCE_FORMAT::B5G6R5_UNORM;
	case DXGI_FORMAT_B5G5R5A1_UNORM:
		return RESOURCE_FORMAT::B5G5R5A1_UNORM;
	case DXGI_FORMAT_B8G8R8A8_UNORM:
		return RESOURCE_FORMAT::B8G8R8A8_UNORM;
	case DXGI_FORMAT_B8G8R8X8_UNORM:
		return RESOURCE_FORMAT::B8G8R8X8_UNORM;
	case DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM:
		return RESOURCE_FORMAT::R10G10B10_XR_BIAS_A2_UNORM;
	case DXGI_FORMAT_B8G8R8A8_TYPELESS:
		return RESOURCE_FORMAT::B8G8R8A8_TYPELESS;
	case DXGI_FORMAT_B8G8R8A8_UNORM_SRGB:
		return RESOURCE_FORMAT::B8G8R8A8_UNORM_SRGB;
	case DXGI_FORMAT_B8G8R8X8_TYPELESS:
		return RESOURCE_FORMAT::B8G8R8X8_TYPELESS;
	case DXGI_FORMAT_B8G8R8X8_UNORM_SRGB:
		return RESOURCE_FORMAT::B8G8R8X8_UNORM_SRGB;
	case DXGI_FORMAT_BC6H_TYPELESS:
		return RESOURCE_FORMAT::BC6H_TYPELESS;
	case DXGI_FORMAT_BC6H_UF16:
		return RESOURCE_FORMAT::BC6H_UF16;
	case DXGI_FORMAT_BC6H_SF16:
		return RESOURCE_FORMAT::BC6H_SF16;
	case DXGI_FORMAT_BC7_TYPELESS:
		return RESOURCE_FORMAT::BC7_TYPELESS;
	case DXGI_FORMAT_BC7_UNORM:
		return RESOURCE_FORMAT::BC7_UNORM;
	case DXGI_FORMAT_BC7_UNORM_SRGB:
		return RESOURCE_FORMAT::BC7_UNORM_SRGB;
	default:
		assert( false );
		return RESOURCE_FORMAT::UNKNOWN;
	}
}

inline bool IsTexture1D( const TEXTURE_TRAIT& trait )
{
	return trait.m_height < 2;
}

inline bool IsTexture2D( const TEXTURE_TRAIT& trait )
{
	return trait.m_sampleCount > 0;
}

inline bool IsTexture3D( const TEXTURE_TRAIT& trait )
{
	return trait.m_height > 1 && trait.m_depth > 1 && trait.m_sampleCount < 2;
}

inline UINT Convert3D11PrimToPrim( D3D_PRIMITIVE_TOPOLOGY primitive )
{
	using namespace RESOURCE_PRIMITIVE;

	switch ( primitive )
	{
	case D3D_PRIMITIVE_TOPOLOGY_UNDEFINED:
		return UNDEFINED;
	case D3D_PRIMITIVE_TOPOLOGY_POINTLIST:
		return POINTLIST;
	case D3D_PRIMITIVE_TOPOLOGY_LINELIST:
		return LINELIST;
	case D3D_PRIMITIVE_TOPOLOGY_LINESTRIP:
		return LINESTRIP;
	case D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST:
		return TRIANGLELIST;
	case D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP:
		return TRIANGLESTRIP;
	case D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ:
		return LINELIST_ADJ;
	case D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ:
		return LINESTRIP_ADJ;
	case D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ:
		return TRIANGLELIST_ADJ;
	case D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ:
		return TRIANGLESTRIP_ADJ;
	case D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 1;
	case D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 2;
	case D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 3;
	case D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 4;
	case D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 5;
	case D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 6;
	case D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 7;
	case D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 8;
	case D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 9;
	case D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 10;
	case D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 11;
	case D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 12;
	case D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 13;
	case D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 14;
	case D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 15;
	case D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 16;
	case D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 17;
	case D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 18;
	case D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 19;
	case D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 20;
	case D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 21;
	case D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 22;
	case D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 23;
	case D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 24;
	case D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 25;
	case D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 26;
	case D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 27;
	case D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 28;
	case D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 29;
	case D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 30;
	case D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 31;
	case D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST:
		return CONTROL_POINT_PATCHLIST + 32;
	default:
		assert( false );
		return UNDEFINED;
	}
}

inline D3D_PRIMITIVE_TOPOLOGY ConvertPrimToD3D11Prim( UINT primitive )
{
	using namespace RESOURCE_PRIMITIVE;

	switch ( primitive )
	{
	case UNDEFINED:
		return D3D_PRIMITIVE_TOPOLOGY_UNDEFINED;
	case POINTLIST:
		return D3D_PRIMITIVE_TOPOLOGY_POINTLIST;
	case LINELIST:
		return D3D_PRIMITIVE_TOPOLOGY_LINELIST;
	case LINESTRIP:
		return D3D_PRIMITIVE_TOPOLOGY_LINESTRIP;
	case TRIANGLELIST:
		return D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST;
	case TRIANGLESTRIP:
		return D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP;
	case LINELIST_ADJ:
		return D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ;
	case LINESTRIP_ADJ:
		return D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ;
	case TRIANGLELIST_ADJ:
		return D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ;
	case TRIANGLESTRIP_ADJ:
		return D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ;
	case CONTROL_POINT_PATCHLIST + 1:
		return D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 2:
		return D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 3:
		return D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 4:
		return D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 5:
		return D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 6:
		return D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 7:
		return D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 8:
		return D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 9:
		return D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 10:
		return D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 11:
		return D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 12:
		return D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 13:
		return D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 14:
		return D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 15:
		return D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 16:
		return D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 17:
		return D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 18:
		return D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 19:
		return D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 20:
		return D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 21:
		return D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 22:
		return D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 23:
		return D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 24:
		return D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 25:
		return D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 26:
		return D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 27:
		return D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 28:
		return D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 29:
		return D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 30:
		return D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 31:
		return D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST;
	case CONTROL_POINT_PATCHLIST + 32:
		return D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST;
	default:
		assert( false );
		return D3D_PRIMITIVE_TOPOLOGY_UNDEFINED;
	}
}

inline D3D11_MAP ConvertLockFlagToD3D11Map( UINT lockFlag )
{
	switch ( lockFlag )
	{
	case BUFFER_LOCKFLAG::READ:
		return D3D11_MAP_READ;
	case BUFFER_LOCKFLAG::READ_WRITE:
		return D3D11_MAP_READ_WRITE;
	case BUFFER_LOCKFLAG::WRITE:
		return D3D11_MAP_WRITE;
	case BUFFER_LOCKFLAG::WRITE_DISCARD:
		return D3D11_MAP_WRITE_DISCARD;
	case BUFFER_LOCKFLAG::WRITE_NO_OVERWRITE:
		return D3D11_MAP_WRITE_NO_OVERWRITE;
	default:
		__debugbreak( );
		return static_cast<D3D11_MAP>( 0 );
	}
}

inline D3D11_DEPTH_WRITE_MASK ConvertToDepthWriteMask( DEPTH_WRITE_MODE depthWriteMode )
{
	switch ( depthWriteMode )
	{
	case DEPTH_WRITE_MODE::ZERO:
		return D3D11_DEPTH_WRITE_MASK_ZERO;
	case DEPTH_WRITE_MODE::ALL:
		return D3D11_DEPTH_WRITE_MASK_ALL;
	default:
		assert( false );
		return D3D11_DEPTH_WRITE_MASK_ZERO;
	}
}

inline D3D11_COMPARISON_FUNC ConvertToComparisionFunc( COMPARISON_FUNC comparisonFunc )
{
	switch ( comparisonFunc )
	{
	case COMPARISON_FUNC::NEVER:
		return D3D11_COMPARISON_NEVER;
	case COMPARISON_FUNC::LESS:
		return D3D11_COMPARISON_LESS;
	case COMPARISON_FUNC::EQUAL:
		return D3D11_COMPARISON_EQUAL;
	case COMPARISON_FUNC::LESS_EQUAL:
		return D3D11_COMPARISON_LESS_EQUAL;
	case COMPARISON_FUNC::GREATER:
		return D3D11_COMPARISON_GREATER;
	case COMPARISON_FUNC::NOT_EQUAL:
		return D3D11_COMPARISON_NOT_EQUAL;
	case COMPARISON_FUNC::GREATER_EQUAL:
		return D3D11_COMPARISON_GREATER_EQUAL;
	case COMPARISON_FUNC::ALWAYS:
		return D3D11_COMPARISON_ALWAYS;
	default:
		assert( false );
		return D3D11_COMPARISON_NEVER;
	}
}

inline D3D11_STENCIL_OP ConvertToStencilOp( STENCIL_OP stencilOp )
{
	switch ( stencilOp )
	{
	case STENCIL_OP::KEEP:
		return D3D11_STENCIL_OP_KEEP;
	case STENCIL_OP::ZERO:
		return D3D11_STENCIL_OP_ZERO;
	case STENCIL_OP::REPLACE:
		return D3D11_STENCIL_OP_REPLACE;
	case STENCIL_OP::INCR_SAT:
		return D3D11_STENCIL_OP_INCR_SAT;
	case STENCIL_OP::DECR_SAT:
		return D3D11_STENCIL_OP_DECR_SAT;
	case STENCIL_OP::INVERT:
		return D3D11_STENCIL_OP_INVERT;
	case STENCIL_OP::INCR:
		return D3D11_STENCIL_OP_INCR;
	case STENCIL_OP::DECR:
		return D3D11_STENCIL_OP_DECR;
	default:
		assert( false );
		return D3D11_STENCIL_OP_KEEP;
	}
}

inline D3D11_FILL_MODE ConvertToFillMode( FILL_MODE fillMode )
{
	switch ( fillMode )
	{
	case FILL_MODE::WIREFRAME:
		return D3D11_FILL_WIREFRAME;
	case FILL_MODE::SOLID:
		return D3D11_FILL_SOLID;
	default:
		assert( false );
		return D3D11_FILL_WIREFRAME;
	}
}

inline D3D11_CULL_MODE ConvertToCullMode( CULL_MODE cullMode )
{
	switch ( cullMode )
	{
	case CULL_MODE::NONE:
		return D3D11_CULL_NONE;
	case CULL_MODE::FRONT:
		return D3D11_CULL_FRONT;
	case CULL_MODE::BACK:
		return D3D11_CULL_BACK;
	default:
		assert( false );
		return D3D11_CULL_NONE;
	}
}

inline D3D11_FILTER ConvertToFilter( TEXTURE_FILTER::Type filter )
{
	return static_cast<D3D11_FILTER>( filter );
}

inline D3D11_TEXTURE_ADDRESS_MODE ConvertToTextureAddress( TEXTURE_ADDRESS_MODE addressMode )
{
	switch ( addressMode )
	{
	case TEXTURE_ADDRESS_MODE::WRAP:
		return D3D11_TEXTURE_ADDRESS_WRAP;
	case TEXTURE_ADDRESS_MODE::MIRROR:
		return D3D11_TEXTURE_ADDRESS_MIRROR;
	case TEXTURE_ADDRESS_MODE::CLAMP:
		return D3D11_TEXTURE_ADDRESS_CLAMP;
	case TEXTURE_ADDRESS_MODE::BORDER:
		return D3D11_TEXTURE_ADDRESS_BORDER;
	case TEXTURE_ADDRESS_MODE::MIRROR_ONCE:
		return D3D11_TEXTURE_ADDRESS_MIRROR_ONCE;
	default:
		assert( false );
		return D3D11_TEXTURE_ADDRESS_WRAP;
	}
}

inline D3D11_BLEND ConvertToBlend( BLEND blend )
{
	switch ( blend )
	{
	case BLEND::ZERO:
		return D3D11_BLEND_ZERO;
	case BLEND::ONE:
		return D3D11_BLEND_ONE;
	case BLEND::SRC_COLOR:
		return D3D11_BLEND_SRC_COLOR;
	case BLEND::INV_SRC_COLOR:
		return D3D11_BLEND_INV_SRC_COLOR;
	case BLEND::SRC_ALPHA:
		return D3D11_BLEND_SRC_ALPHA;
	case BLEND::INV_SRC_ALPHA:
		return D3D11_BLEND_INV_SRC_ALPHA;
	case BLEND::DEST_ALPHA:
		return D3D11_BLEND_DEST_ALPHA;
	case BLEND::INV_DEST_ALPHA:
		return D3D11_BLEND_INV_DEST_ALPHA;
	case BLEND::DEST_COLOR:
		return D3D11_BLEND_DEST_COLOR;
	case BLEND::INV_DEST_COLOR:
		return D3D11_BLEND_INV_DEST_COLOR;
	case BLEND::SRC_ALPHA_SAT:
		return D3D11_BLEND_SRC_ALPHA_SAT;
	case BLEND::BLEND_FACTOR:
		return D3D11_BLEND_BLEND_FACTOR;
	case BLEND::INV_BLEND_FACTOR:
		return D3D11_BLEND_INV_BLEND_FACTOR;
	case BLEND::SRC1_COLOR:
		return D3D11_BLEND_SRC1_COLOR;
	case BLEND::INV_SRC1_COLOR:
		return D3D11_BLEND_INV_SRC1_COLOR;
	case BLEND::SRC1_ALPHA:
		return D3D11_BLEND_SRC1_ALPHA;
	case BLEND::INV_SRC1_ALPHA:
		return D3D11_BLEND_INV_SRC1_ALPHA;
	default:
		assert( false );
		return D3D11_BLEND_ZERO;
	}
}

inline D3D11_BLEND_OP ConvertToBlendOp( BLEND_OP blendOp )
{
	switch ( blendOp )
	{
	case BLEND_OP::ADD:
		return D3D11_BLEND_OP_ADD;
	case BLEND_OP::SUBTRACT:
		return D3D11_BLEND_OP_SUBTRACT;
	case BLEND_OP::REV_SUBTRACT:
		return D3D11_BLEND_OP_REV_SUBTRACT;
	case BLEND_OP::MIN:
		return D3D11_BLEND_OP_MIN;
	case BLEND_OP::MAX:
		return D3D11_BLEND_OP_MAX;
	default:
		assert( false );
		return D3D11_BLEND_OP_ADD;
	}
}

inline unsigned char ConvertToColorWriteEnable( COLOR_WRITE_ENABLE colorWriteEnable )
{
	return static_cast<unsigned char>( colorWriteEnable );
}
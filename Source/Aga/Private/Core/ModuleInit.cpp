#include "stdafx.h"

#include "IAga.h"
#include "Core/InterfaceFactories.h"
#include "D3D11Api.h"

void RegisterResourceEnumString( )
{
	// Register enum string
	// RESOURCE_FORMAT
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::UNKNOWN );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R32G32B32A32_TYPELESS );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R32G32B32A32_FLOAT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R32G32B32A32_UINT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R32G32B32A32_SINT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R32G32B32_TYPELESS );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R32G32B32_FLOAT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R32G32B32_UINT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R32G32B32_SINT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R16G16B16A16_TYPELESS );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R16G16B16A16_FLOAT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R16G16B16A16_UNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R16G16B16A16_UINT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R16G16B16A16_SNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R16G16B16A16_SINT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R32G32_TYPELESS );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R32G32_FLOAT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R32G32_UINT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R32G32_SINT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R32G8X24_TYPELESS );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::D32_FLOAT_S8X24_UINT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R32_FLOAT_X8X24_TYPELESS );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::X32_TYPELESS_G8X24_UINT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R10G10B10A2_TYPELESS );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R10G10B10A2_UNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R10G10B10A2_UINT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R11G11B10_FLOAT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R8G8B8A8_TYPELESS );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R8G8B8A8_UNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R8G8B8A8_UNORM_SRGB );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R8G8B8A8_UINT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R8G8B8A8_SNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R8G8B8A8_SINT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R16G16_TYPELESS );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R16G16_FLOAT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R16G16_UNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R16G16_UINT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R16G16_SNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R16G16_SINT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R32_TYPELESS );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::D32_FLOAT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R32_FLOAT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R32_UINT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R32_SINT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R24G8_TYPELESS );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::D24_UNORM_S8_UINT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R24_UNORM_X8_TYPELESS );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::X24_TYPELESS_G8_UINT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R8G8_TYPELESS );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R8G8_UNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R8G8_UINT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R8G8_SNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R8G8_SINT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R16_TYPELESS );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R16_FLOAT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::D16_UNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R16_UNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R16_UINT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R16_SNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R16_SINT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R8_TYPELESS );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R8_UNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R8_UINT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R8_SNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R8_SINT );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::A8_UNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R1_UNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R9G9B9E5_SHAREDEXP );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R8G8_B8G8_UNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::G8R8_G8B8_UNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::BC1_TYPELESS );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::BC1_UNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::BC1_UNORM_SRGB );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::BC2_TYPELESS );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::BC2_UNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::BC2_UNORM_SRGB );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::BC3_TYPELESS );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::BC3_UNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::BC3_UNORM_SRGB );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::BC4_TYPELESS );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::BC4_UNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::BC4_SNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::BC5_TYPELESS );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::BC5_UNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::BC5_SNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::B5G6R5_UNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::B5G5R5A1_UNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::B8G8R8A8_UNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::B8G8R8X8_UNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::R10G10B10_XR_BIAS_A2_UNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::B8G8R8A8_TYPELESS );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::B8G8R8A8_UNORM_SRGB );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::B8G8R8X8_TYPELESS );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::B8G8R8X8_UNORM_SRGB );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::BC6H_TYPELESS );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::BC6H_UF16 );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::BC6H_SF16 );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::BC7_TYPELESS );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::BC7_UNORM );
	REGISTER_ENUM_STRING( RESOURCE_FORMAT::BC7_UNORM_SRGB );

	//USAGE
	REGISTER_ENUM_STRING( RESOURCE_ACCESS_FLAG::GPU_READ );
	REGISTER_ENUM_STRING( RESOURCE_ACCESS_FLAG::GPU_WRITE );
	REGISTER_ENUM_STRING( RESOURCE_ACCESS_FLAG::CPU_READ );
	REGISTER_ENUM_STRING( RESOURCE_ACCESS_FLAG::CPU_WRITE );

	// RESOURCE_BIND_TYPE
	REGISTER_ENUM_STRING( RESOURCE_BIND_TYPE::VERTEX_BUFFER );
	REGISTER_ENUM_STRING( RESOURCE_BIND_TYPE::INDEX_BUFFER );
	REGISTER_ENUM_STRING( RESOURCE_BIND_TYPE::CONSTANT_BUFFER );
	REGISTER_ENUM_STRING( RESOURCE_BIND_TYPE::SHADER_RESOURCE );
	REGISTER_ENUM_STRING( RESOURCE_BIND_TYPE::STREAM_OUTPUT );
	REGISTER_ENUM_STRING( RESOURCE_BIND_TYPE::RENDER_TARGET );
	REGISTER_ENUM_STRING( RESOURCE_BIND_TYPE::DEPTH_STENCIL );
	REGISTER_ENUM_STRING( RESOURCE_BIND_TYPE::RANDOM_ACCESS );

	//Misc Flag
	REGISTER_ENUM_STRING( RESOURCE_MISC::GENERATE_MIPS );
	REGISTER_ENUM_STRING( RESOURCE_MISC::SHARED );
	REGISTER_ENUM_STRING( RESOURCE_MISC::TEXTURECUBE );
	REGISTER_ENUM_STRING( RESOURCE_MISC::DRAWINDIRECT_ARGS );
	REGISTER_ENUM_STRING( RESOURCE_MISC::BUFFER_ALLOW_RAW_VIEWS );
	REGISTER_ENUM_STRING( RESOURCE_MISC::BUFFER_STRUCTURED );
	REGISTER_ENUM_STRING( RESOURCE_MISC::RESOURCE_CLAMP );
	REGISTER_ENUM_STRING( RESOURCE_MISC::SHARED_KEYEDMUTEX );
	REGISTER_ENUM_STRING( RESOURCE_MISC::GDI_COMPATIBLE );

	// Texture filter
	REGISTER_ENUM_STRING( TEXTURE_FILTER::POINT );
	REGISTER_ENUM_STRING( TEXTURE_FILTER::MIP_LINEAR );
	REGISTER_ENUM_STRING( TEXTURE_FILTER::MAG_LINEAR );
	REGISTER_ENUM_STRING( TEXTURE_FILTER::MIN_LINEAR );
	REGISTER_ENUM_STRING( TEXTURE_FILTER::ANISOTROPIC );
	REGISTER_ENUM_STRING( TEXTURE_FILTER::COMPARISON );
	REGISTER_ENUM_STRING( TEXTURE_FILTER::MINIMUM );
	REGISTER_ENUM_STRING( TEXTURE_FILTER::MAXIMUM );

	// Texture address mode
	REGISTER_ENUM_STRING( TEXTURE_ADDRESS_MODE::WRAP );
	REGISTER_ENUM_STRING( TEXTURE_ADDRESS_MODE::MIRROR );
	REGISTER_ENUM_STRING( TEXTURE_ADDRESS_MODE::CLAMP );
	REGISTER_ENUM_STRING( TEXTURE_ADDRESS_MODE::BORDER );
	REGISTER_ENUM_STRING( TEXTURE_ADDRESS_MODE::MIRROR_ONCE );

	// Comparision func
	REGISTER_ENUM_STRING( COMPARISON_FUNC::NEVER );
	REGISTER_ENUM_STRING( COMPARISON_FUNC::LESS );
	REGISTER_ENUM_STRING( COMPARISON_FUNC::EQUAL );
	REGISTER_ENUM_STRING( COMPARISON_FUNC::LESS_EQUAL );
	REGISTER_ENUM_STRING( COMPARISON_FUNC::GREATER );
	REGISTER_ENUM_STRING( COMPARISON_FUNC::NOT_EQUAL );
	REGISTER_ENUM_STRING( COMPARISON_FUNC::GREATER_EQUAL );
	REGISTER_ENUM_STRING( COMPARISON_FUNC::ALWAYS );

	// Fill mode
	REGISTER_ENUM_STRING( FILL_MODE::WIREFRAME );
	REGISTER_ENUM_STRING( FILL_MODE::SOLID );

	// Cull mode
	REGISTER_ENUM_STRING( CULL_MODE::NONE );
	REGISTER_ENUM_STRING( CULL_MODE::FRONT );
	REGISTER_ENUM_STRING( CULL_MODE::BACK );

	// Blend
	REGISTER_ENUM_STRING( BLEND::ZERO );
	REGISTER_ENUM_STRING( BLEND::ONE );
	REGISTER_ENUM_STRING( BLEND::SRC_COLOR );
	REGISTER_ENUM_STRING( BLEND::INV_SRC_COLOR );
	REGISTER_ENUM_STRING( BLEND::SRC_ALPHA );
	REGISTER_ENUM_STRING( BLEND::INV_SRC_ALPHA );
	REGISTER_ENUM_STRING( BLEND::DEST_ALPHA );
	REGISTER_ENUM_STRING( BLEND::INV_DEST_ALPHA );
	REGISTER_ENUM_STRING( BLEND::DEST_COLOR );
	REGISTER_ENUM_STRING( BLEND::INV_DEST_COLOR );
	REGISTER_ENUM_STRING( BLEND::SRC_ALPHA_SAT );
	REGISTER_ENUM_STRING( BLEND::BLEND_FACTOR );
	REGISTER_ENUM_STRING( BLEND::INV_BLEND_FACTOR );
	REGISTER_ENUM_STRING( BLEND::SRC1_COLOR );
	REGISTER_ENUM_STRING( BLEND::INV_SRC1_COLOR );
	REGISTER_ENUM_STRING( BLEND::SRC1_ALPHA );
	REGISTER_ENUM_STRING( BLEND::INV_SRC1_ALPHA );

	// Blend operation
	REGISTER_ENUM_STRING( BLEND_OP::ADD );
	REGISTER_ENUM_STRING( BLEND_OP::SUBTRACT );
	REGISTER_ENUM_STRING( BLEND_OP::REV_SUBTRACT );
	REGISTER_ENUM_STRING( BLEND_OP::MIN );
	REGISTER_ENUM_STRING( BLEND_OP::MAX );

	// Color write enable
	REGISTER_ENUM_STRING( COLOR_WRITE_ENABLE::RED );
	REGISTER_ENUM_STRING( COLOR_WRITE_ENABLE::GREEN );
	REGISTER_ENUM_STRING( COLOR_WRITE_ENABLE::BLUE );
	REGISTER_ENUM_STRING( COLOR_WRITE_ENABLE::ALPHA );
	REGISTER_ENUM_STRING( COLOR_WRITE_ENABLE::ALL );
}

AGA_FUNC_DLL void BootUpModules( )
{
	RegisterFactory<IAga>( &GetD3D11GraphicsApi );

	CreateAbstractGraphicsApi( );

	RegisterResourceEnumString( );
}

AGA_FUNC_DLL void ShutdownModules( )
{
	DestoryAbstractGraphicsApi( );

	UnregisterFactory<IAga>( );
}
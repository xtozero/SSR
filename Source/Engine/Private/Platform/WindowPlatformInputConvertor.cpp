#include "stdafx.h"
#include "WindowPlatformInputConvertor.h"

#include "Core/ILogic.h"

#include <windowsx.h>

namespace
{
	void RegisterWindowInputEnumString()
	{
		// mouse input
		REGISTER_ENUM_STRING( WM_MOUSEMOVE );
		REGISTER_ENUM_STRING( WM_LBUTTONDOWN );
		REGISTER_ENUM_STRING( WM_LBUTTONUP );
		REGISTER_ENUM_STRING( WM_LBUTTONDBLCLK );
		REGISTER_ENUM_STRING( WM_RBUTTONDOWN );
		REGISTER_ENUM_STRING( WM_RBUTTONUP );
		REGISTER_ENUM_STRING( WM_RBUTTONDBLCLK );
		REGISTER_ENUM_STRING( WM_MBUTTONDOWN );
		REGISTER_ENUM_STRING( WM_MBUTTONUP );
		REGISTER_ENUM_STRING( WM_MBUTTONDBLCLK );
		REGISTER_ENUM_STRING( WM_MOUSEWHEEL );
		REGISTER_ENUM_STRING( WM_XBUTTONDOWN );
		REGISTER_ENUM_STRING( WM_XBUTTONUP );
		REGISTER_ENUM_STRING( WM_XBUTTONDBLCLK );
		
		// keyboard input
		REGISTER_ENUM_STRING( WM_KEYDOWN );
		REGISTER_ENUM_STRING( WM_KEYUP );

		// virtual keys		
		REGISTER_ENUM_STRING( VK_LBUTTON );
		REGISTER_ENUM_STRING( VK_RBUTTON );
		REGISTER_ENUM_STRING( VK_CANCEL );
		REGISTER_ENUM_STRING( VK_MBUTTON );
		REGISTER_ENUM_STRING( VK_XBUTTON1 );
		REGISTER_ENUM_STRING( VK_XBUTTON2 );
		REGISTER_ENUM_STRING( VK_BACK );
		REGISTER_ENUM_STRING( VK_TAB );
		REGISTER_ENUM_STRING( VK_CLEAR );
		REGISTER_ENUM_STRING( VK_RETURN );

		REGISTER_ENUM_STRING( VK_SHIFT );
		REGISTER_ENUM_STRING( VK_CONTROL );
		REGISTER_ENUM_STRING( VK_MENU );
		REGISTER_ENUM_STRING( VK_PAUSE );
		REGISTER_ENUM_STRING( VK_CAPITAL );

		REGISTER_ENUM_STRING( VK_ESCAPE );

		REGISTER_ENUM_STRING( VK_CONVERT );
		REGISTER_ENUM_STRING( VK_NONCONVERT );
		REGISTER_ENUM_STRING( VK_ACCEPT );
		REGISTER_ENUM_STRING( VK_MODECHANGE );

		REGISTER_ENUM_STRING( VK_SPACE );
		REGISTER_ENUM_STRING( VK_PRIOR );
		REGISTER_ENUM_STRING( VK_NEXT );
		REGISTER_ENUM_STRING( VK_END );
		REGISTER_ENUM_STRING( VK_HOME );
		REGISTER_ENUM_STRING( VK_LEFT );
		REGISTER_ENUM_STRING( VK_UP );
		REGISTER_ENUM_STRING( VK_RIGHT );
		REGISTER_ENUM_STRING( VK_DOWN );
		REGISTER_ENUM_STRING( VK_SELECT );
		REGISTER_ENUM_STRING( VK_PRINT );
		REGISTER_ENUM_STRING( VK_EXECUTE );
		REGISTER_ENUM_STRING( VK_SNAPSHOT );
		REGISTER_ENUM_STRING( VK_INSERT );
		REGISTER_ENUM_STRING( VK_DELETE );
		REGISTER_ENUM_STRING( VK_HELP );

		enum
		{
			VK_0 = '0',
			VK_1,
			VK_2,
			VK_3,
			VK_4,
			VK_5,
			VK_6,
			VK_7,
			VK_8,
			VK_9,
		};

		REGISTER_ENUM_STRING( VK_0 );
		REGISTER_ENUM_STRING( VK_1 );
		REGISTER_ENUM_STRING( VK_2 );
		REGISTER_ENUM_STRING( VK_3 );
		REGISTER_ENUM_STRING( VK_4 );
		REGISTER_ENUM_STRING( VK_5 );
		REGISTER_ENUM_STRING( VK_6 );
		REGISTER_ENUM_STRING( VK_7 );
		REGISTER_ENUM_STRING( VK_8 );
		REGISTER_ENUM_STRING( VK_9 );

		enum
		{
			VK_A = 'A',
			VK_B,
			VK_C,
			VK_D,
			VK_E,
			VK_F,
			VK_G,
			VK_H,
			VK_I,
			VK_J,
			VK_K,
			VK_L,
			VK_M,
			VK_N,
			VK_O,
			VK_P,
			VK_Q,
			VK_R,
			VK_S,
			VK_T,
			VK_U,
			VK_V,
			VK_W,
			VK_X,
			VK_Y,
			VK_Z,
		};

		REGISTER_ENUM_STRING( VK_A );
		REGISTER_ENUM_STRING( VK_B );
		REGISTER_ENUM_STRING( VK_C );
		REGISTER_ENUM_STRING( VK_D );
		REGISTER_ENUM_STRING( VK_E );
		REGISTER_ENUM_STRING( VK_F );
		REGISTER_ENUM_STRING( VK_G );
		REGISTER_ENUM_STRING( VK_H );
		REGISTER_ENUM_STRING( VK_I );
		REGISTER_ENUM_STRING( VK_J );
		REGISTER_ENUM_STRING( VK_K );
		REGISTER_ENUM_STRING( VK_L );
		REGISTER_ENUM_STRING( VK_M );
		REGISTER_ENUM_STRING( VK_N );
		REGISTER_ENUM_STRING( VK_O );
		REGISTER_ENUM_STRING( VK_P );
		REGISTER_ENUM_STRING( VK_Q );
		REGISTER_ENUM_STRING( VK_R );
		REGISTER_ENUM_STRING( VK_S );
		REGISTER_ENUM_STRING( VK_T );
		REGISTER_ENUM_STRING( VK_U );
		REGISTER_ENUM_STRING( VK_V );
		REGISTER_ENUM_STRING( VK_W );
		REGISTER_ENUM_STRING( VK_X );
		REGISTER_ENUM_STRING( VK_Y );
		REGISTER_ENUM_STRING( VK_Z );

		REGISTER_ENUM_STRING( VK_LWIN );
		REGISTER_ENUM_STRING( VK_RWIN );
		REGISTER_ENUM_STRING( VK_APPS );
		REGISTER_ENUM_STRING( VK_SLEEP );
		REGISTER_ENUM_STRING( VK_NUMPAD0 );
		REGISTER_ENUM_STRING( VK_NUMPAD1 );
		REGISTER_ENUM_STRING( VK_NUMPAD2 );
		REGISTER_ENUM_STRING( VK_NUMPAD3 );
		REGISTER_ENUM_STRING( VK_NUMPAD4 );
		REGISTER_ENUM_STRING( VK_NUMPAD5 );
		REGISTER_ENUM_STRING( VK_NUMPAD6 );
		REGISTER_ENUM_STRING( VK_NUMPAD7 );
		REGISTER_ENUM_STRING( VK_NUMPAD8 );
		REGISTER_ENUM_STRING( VK_NUMPAD9 );
		REGISTER_ENUM_STRING( VK_MULTIPLY );
		REGISTER_ENUM_STRING( VK_ADD );
		REGISTER_ENUM_STRING( VK_SEPARATOR );
		REGISTER_ENUM_STRING( VK_SUBTRACT );
		REGISTER_ENUM_STRING( VK_DECIMAL );
		REGISTER_ENUM_STRING( VK_DIVIDE );
		REGISTER_ENUM_STRING( VK_F1 );
		REGISTER_ENUM_STRING( VK_F2 );
		REGISTER_ENUM_STRING( VK_F3 );
		REGISTER_ENUM_STRING( VK_F4 );
		REGISTER_ENUM_STRING( VK_F5 );
		REGISTER_ENUM_STRING( VK_F6 );
		REGISTER_ENUM_STRING( VK_F7 );
		REGISTER_ENUM_STRING( VK_F8 );
		REGISTER_ENUM_STRING( VK_F9 );
		REGISTER_ENUM_STRING( VK_F10 );
		REGISTER_ENUM_STRING( VK_F11 );
		REGISTER_ENUM_STRING( VK_F12 );
		REGISTER_ENUM_STRING( VK_F13 );
		REGISTER_ENUM_STRING( VK_F14 );
		REGISTER_ENUM_STRING( VK_F15 );
		REGISTER_ENUM_STRING( VK_F16 );
		REGISTER_ENUM_STRING( VK_F17 );
		REGISTER_ENUM_STRING( VK_F18 );
		REGISTER_ENUM_STRING( VK_F19 );
		REGISTER_ENUM_STRING( VK_F20 );
		REGISTER_ENUM_STRING( VK_F21 );
		REGISTER_ENUM_STRING( VK_F22 );
		REGISTER_ENUM_STRING( VK_F23 );
		REGISTER_ENUM_STRING( VK_F24 );
		REGISTER_ENUM_STRING( VK_NUMLOCK );
		REGISTER_ENUM_STRING( VK_SCROLL );
		REGISTER_ENUM_STRING( VK_OEM_NEC_EQUAL );
		REGISTER_ENUM_STRING( VK_LSHIFT );
		REGISTER_ENUM_STRING( VK_RSHIFT );
		REGISTER_ENUM_STRING( VK_LCONTROL );
		REGISTER_ENUM_STRING( VK_RCONTROL );
	}
}

float GetMouseZAxis( const MSG& wndMsg )
{
	switch ( wndMsg.message )
	{
		case WM_LBUTTONDOWN:
		case WM_RBUTTONDOWN:
		case WM_MBUTTONDOWN:
			return -1.0f;
		case WM_LBUTTONUP:
		case WM_RBUTTONUP:
		case WM_MBUTTONUP:
			return 1.0f;
		case WM_MOUSEWHEEL:
			return GET_WHEEL_DELTA_WPARAM( wndMsg.wParam );
		default:
			return 0.f;
	}
}

bool WindowPlatformInputConvertor::Initialize( )
{
	return m_inputMap.Initialize( );
}

bool WindowPlatformInputConvertor::ProcessInput( ILogic& logic, const MSG& wndMsg )
{
	UserInput input;

	HWND hWnd = wndMsg.hwnd;
	uint32 message = wndMsg.message;
	LPARAM lParam = wndMsg.lParam;
	WPARAM wParam = wndMsg.wParam;

	switch ( message )
	{
	case WM_KEYDOWN:
	case WM_KEYUP:
		{
			input = Convert( static_cast<uint32>( wParam ) );
			if ( input.m_code == UIC_UNKNOWN )
			{
				return false;
			}

			input.m_axis[UserInput::Z_AXIS] = ( message == WM_KEYDOWN ) ? -1.f : 1.f;
		}
		break;
	case WM_LBUTTONDOWN:
	case WM_LBUTTONUP:
	case WM_RBUTTONDOWN:
	case WM_RBUTTONUP:
	case WM_MBUTTONDOWN:
	case WM_MBUTTONUP:
	case WM_MOUSEWHEEL:
	case WM_MOUSEMOVE:
		{
			input = Convert( message );
			if ( input.m_code == UIC_UNKNOWN )
			{
				return false;
			}

			POINT pt{ GET_X_LPARAM( lParam ),  GET_Y_LPARAM( lParam ) };
			if ( message == WM_MOUSEWHEEL )
			{
				ScreenToClient( hWnd, &pt );
			}

			CXMFLOAT2 curMousePos = { static_cast<float>( pt.x ), static_cast<float>( pt.y ) };
			
			if ( message == WM_MOUSEMOVE )
			{
				m_prevMousePos = curMousePos - m_prevMousePos;
				input.m_axis[UserInput::X_AXIS] = m_prevMousePos.x;
				input.m_axis[UserInput::Y_AXIS] = m_prevMousePos.y;
			}
			else
			{
				input.m_axis[UserInput::X_AXIS] = curMousePos.x;
				input.m_axis[UserInput::Y_AXIS] = curMousePos.y;
			}
			input.m_axis[UserInput::Z_AXIS] = GetMouseZAxis( wndMsg );
			m_prevMousePos = curMousePos;
		}
		break;
	default:
		//Message UnHandled;
		return false;
		break;
	}

	logic.HandleUserInput( input );
	return true;
}

UserInput WindowPlatformInputConvertor::Convert( uint32 msg )
{
	UserInput input;
	input.m_code = m_inputMap.Convert( msg );

	return input;
}

bool WindowPlatformInputMap::Initialize( )
{
	RegisterWindowInputEnumString( );
	m_userInputMap.Initialize( );
	return m_userInputMap.LoadConfig( "./Configs/window_platform.json" );
}
